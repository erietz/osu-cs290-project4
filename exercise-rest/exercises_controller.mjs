import express from 'express';
import * as exercises from './exercises_model.mjs';  
// A collection will be created in the MongoDB named "exercises" upon creating
// a new exercise.

// Database is served on port 3000. The UI is served on port 8000 and is
// proxied to make requests through 3000.
const PORT = 3000;

const app = express();

// For sending application/json back as a response to a request
// Also allows parsing of req.body.
app.use(express.json());

/*
* Create a new exercise in response to a POST request. Parameters are specified
* through an object in the request JSON body.
* @param {String} body.name: required
* @param {Number} body.reps: required
* @param {Number} body.weight: required
* @param {String} body.unit: required
* @param {String} body.date: required
* @return {JSON} The same JSON body that is sent in the request is returned in
* the response upon success in addition to the unique _id generated by the
* database. Otherwise an error message is returned.
*/
app.post('/exercises', (req, res) => {

  exercises.createExercise(
    req.body.name,
    req.body.reps,
    req.body.weight,
    req.body.unit,
    req.body.date
  )
    .then(exercise => {
      res.status(201).json(exercise);
    })
    .catch(error => {
      console.error(error);
      res.status(400).json({ Error: 'Request failed' })
    });

});

// Reads all of the exercise from the database in response to a GET request
// @return {JSON} An array of exercise objects upon success. An object
// containing an error message is returned upon failure.
app.get('/exercises', (_, res) => {
  exercises.findExercises({}, '', 0)
    .then(exercise => { res.json(exercise) })   // default status code is 200
    .catch(error => { 
      console.error(error) 
      res.status(400).json( { Error: 'Request failed' } )
    });
});

/*
* Update an exercise in response to at PUT request. Parameters are specified
* through an object in the request JSON body.
* @param {String} body._id: required (the _id returned from a POST request)
* @param {String} body.name: required
* @param {Number} body.reps: required
* @param {Number} body.weight: required
* @param {String} body.unit: required
* @param {String} body.date: required
* @return {JSON} The same JSON body that is sent in the request is returned in
* the response upon success. Otherwise an error message is returned.
*/
app.put('/exercises/:id', (req, res) => {
  const args = {
    _id: req.params.id,
    name: req.body.name,
    reps: req.body.reps,
    weight: req.body.weight,
    unit: req.body.unit,
    date: req.body.date
  }

  exercises.replaceExercise(args)
    .then(nModified => {
      if (nModified === 1){
        res.json(args) 
      } else {
        res.status(404).json({ Error: 'Resource not found' })
      }
    })
    .catch(error => {
      console.error(error)
      res.status(400).json({ Error: 'Request failed' })
    });
});

/*
* Deletes an exercises using its _id. Takes no parameters and returns nothing
* upon success. Upon failure a JSON object is returned with and error message.
*/
app.delete('/exercises/:id', (req, res) => {
  exercises.deleteExercise(req.params.id)
    .then(deletedCount => {
      if (deletedCount === 1) {
        res.status(204).send()
      } else {
        res.status(404).json({ Error: 'Resource not found' })
      }
    })
    .catch(error => {
      console.error(error)
      res.status(400).json({ Error: 'Request failed' })
    });

});


// Run the web server on port 3000----------------------------------------------
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});
